// Servicio para manejar la autenticaci√≥n
import { httpService, endpoints } from './http.js'

export const authService = {
  // Iniciar sesi√≥n
  async login(credentials) {
    try {
      const response = await httpService.post(endpoints.auth.login, credentials)
      
      // Guardar el token si el login es exitoso
      if (response.token) {
        httpService.setAuthToken(response.token)
      }
      
      return response
    } catch (error) {
      throw new Error(error.message || 'Error al iniciar sesi√≥n')
    }
  },

  // Registrarse
  async register(userData) {
    try {
      const response = await httpService.post(endpoints.auth.register, userData)
      
      // El registro exitoso no incluye token autom√°ticamente
      // Solo devolvemos la respuesta del servidor
      return response
    } catch (error) {
      // Manejo espec√≠fico de errores de registro
      if (error.message.includes('username')) {
        throw new Error('El nombre de usuario ya est√° en uso')
      } else if (error.message.includes('email')) {
        throw new Error('El email ya est√° registrado')
      } else {
        throw new Error(error.message || 'Error al registrarse. Int√©ntalo de nuevo.')
      }
    }
  },
  
  // üî• FUNCI√ìN CORREGIDA - Cerrar sesi√≥n
  async logout() {
    try {
      console.log('üîÑ Llamando al endpoint de logout del backend...')
      
      // ‚úÖ LLAMAR al endpoint correcto del backend
      await httpService.post(endpoints.auth.logout)
      console.log('‚úÖ Logout exitoso en el backend')
      
    } catch (error) {
      console.error('‚ùå Error al cerrar sesi√≥n en el backend:', error)
      // No lanzar el error para que siempre se limpie el token local
    } finally {
      // ‚úÖ SIEMPRE limpiar el token local
      console.log('üßπ Limpiando token local...')
      httpService.clearAuthToken()
      console.log('‚úÖ Token local limpiado')
    }
  },

  // Confirmar email
  async confirmEmail(token) {
    try {
      const response = await httpService.get(`${endpoints.auth.confirm}?token=${token}`)
      return response
    } catch (error) {
      throw new Error(error.message || 'Error al confirmar el email')
    }
  },

  // üî• REENVIAR EMAIL DE VERIFICACI√ìN - M√âTODO CORREGIDO
  async resendVerificationEmail(email) {
    try {
      console.log('Enviando petici√≥n de reenv√≠o para email:', email)
      
      const response = await httpService.post(endpoints.auth.resendVerification, { 
        email: email 
      })
      
      console.log('Respuesta del servidor:', response)
      return response
    } catch (error) {
      console.error('Error en resendVerificationEmail:', error)
      throw new Error(error.message || 'Error al reenviar el email de verificaci√≥n')
    }
  },

  // Verificar si el usuario est√° autenticado
  isAuthenticated() {
    return !!httpService.getAuthToken()
  },

  // Obtener token actual
  getToken() {
    return httpService.getAuthToken()
  },

  // üî• NUEVA FUNCI√ìN - Limpiar token (para uso interno y externo)
  clearAuthToken() {
    httpService.clearAuthToken()
  }
}